name: Deploy to prod when tag

on:
  push:
    tags:
      - '*'

jobs:
  bump-version:
    name: Bump version to ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Bump version in package.json to ${{ github.ref_name }}
        run: sed -E -i 's/"version":[[:space:]]"[0-9]+.[0-9]+.[0-9]+"/"version":\ "${{ github.ref_name }}"/g' ./package.json

      - name: Commit and push updated package.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "chore: bump version to ${{ github.ref_name }}"
          commit_user_name: Adrien Carpentier
          commit_user_email: me@adriencarpentier.com
          commit_author: Adrien Carpentier <me@adriencarpentier.com>

  build:
    name: Build and push Docker image ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest

  deploy:
    name: Deploy ${{ github.ref_name }} on prod
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Execute server commands for deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Ensure directory exists
            mkdir -p ${{ secrets.SERVER_PATH }}
            cd ${{ secrets.SERVER_PATH }}

            # Clone or update the repository for configuration files
            if [ -d .git ]; then
              git fetch
              git reset --hard origin/main
            else
              # Clean directory, including nodes_modules but preserving .env
              rm -rf node_modules
              find . -maxdepth 1 ! -name '.' ! -name '..' ! -name '.env' -exec rm -rf {} +
              # Clone repository contents directly to current directory (without creating subdirectory)
              git clone --depth 1 https://github.com/${{ github.repository }}.git temp_repo
              cp -r temp_repo/* temp_repo/.[^.]* . 2>/dev/null || true
              rm -rf temp_repo
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Set Docker image variables
            export TAG="${{ github.ref_name }}"

            # Pull the new Docker images and restart services
            docker compose pull
            docker compose down
            docker compose up -d

            # Verify service is running
            sleep 3  # Give the service time to start
            if ! docker compose ps --format json | grep -q "running"; then
              docker compose logs
              exit 1
            fi

  create-sentry-release:
    name: Create Sentry release
    needs: deploy
    runs-on: ubuntu-latest
    if: success()  # Only create Sentry release if deployment succeeded
    steps:
      - name: Checkout repository for Sentry release
        uses: actions/checkout@v4

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: "adrien-carpentier"
          SENTRY_PROJECT: "universe-timeline"
        with:
          environment: production
          release: ${{ github.ref_name }}
